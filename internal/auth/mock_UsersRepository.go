// Code generated by mockery v2.46.3. DO NOT EDIT.

package auth

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// UserExists provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) UserExists(ctx context.Context, id uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_UserExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserExists'
type MockUsersRepository_UserExists_Call struct {
	*mock.Call
}

// UserExists is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUsersRepository_Expecter) UserExists(ctx interface{}, id interface{}) *MockUsersRepository_UserExists_Call {
	return &MockUsersRepository_UserExists_Call{Call: _e.mock.On("UserExists", ctx, id)}
}

func (_c *MockUsersRepository_UserExists_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUsersRepository_UserExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUsersRepository_UserExists_Call) Return(_a0 bool, _a1 error) *MockUsersRepository_UserExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_UserExists_Call) RunAndReturn(run func(context.Context, uuid.UUID) (bool, error)) *MockUsersRepository_UserExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
