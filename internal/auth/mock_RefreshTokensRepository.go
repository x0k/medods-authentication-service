// Code generated by mockery v2.46.3. DO NOT EDIT.

package auth

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	unit_of_work "github.com/x0k/medods-authentication-service/internal/lib/unit_of_work"
)

// MockRefreshTokensRepository is an autogenerated mock type for the RefreshTokensRepository type
type MockRefreshTokensRepository[T any] struct {
	mock.Mock
}

type MockRefreshTokensRepository_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockRefreshTokensRepository[T]) EXPECT() *MockRefreshTokensRepository_Expecter[T] {
	return &MockRefreshTokensRepository_Expecter[T]{mock: &_m.Mock}
}

// TokenHash provides a mock function with given fields: ctx, uow, userId, deviceId
func (_m *MockRefreshTokensRepository[T]) TokenHash(ctx context.Context, uow unit_of_work.UnitOfWork[T], userId uuid.UUID, deviceId DeviceId) ([]byte, error) {
	ret := _m.Called(ctx, uow, userId, deviceId)

	if len(ret) == 0 {
		panic("no return value specified for TokenHash")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, unit_of_work.UnitOfWork[T], uuid.UUID, DeviceId) ([]byte, error)); ok {
		return rf(ctx, uow, userId, deviceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, unit_of_work.UnitOfWork[T], uuid.UUID, DeviceId) []byte); ok {
		r0 = rf(ctx, uow, userId, deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, unit_of_work.UnitOfWork[T], uuid.UUID, DeviceId) error); ok {
		r1 = rf(ctx, uow, userId, deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefreshTokensRepository_TokenHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenHash'
type MockRefreshTokensRepository_TokenHash_Call[T any] struct {
	*mock.Call
}

// TokenHash is a helper method to define mock.On call
//   - ctx context.Context
//   - uow unit_of_work.UnitOfWork[T]
//   - userId uuid.UUID
//   - deviceId DeviceId
func (_e *MockRefreshTokensRepository_Expecter[T]) TokenHash(ctx interface{}, uow interface{}, userId interface{}, deviceId interface{}) *MockRefreshTokensRepository_TokenHash_Call[T] {
	return &MockRefreshTokensRepository_TokenHash_Call[T]{Call: _e.mock.On("TokenHash", ctx, uow, userId, deviceId)}
}

func (_c *MockRefreshTokensRepository_TokenHash_Call[T]) Run(run func(ctx context.Context, uow unit_of_work.UnitOfWork[T], userId uuid.UUID, deviceId DeviceId)) *MockRefreshTokensRepository_TokenHash_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(unit_of_work.UnitOfWork[T]), args[2].(uuid.UUID), args[3].(DeviceId))
	})
	return _c
}

func (_c *MockRefreshTokensRepository_TokenHash_Call[T]) Return(_a0 []byte, _a1 error) *MockRefreshTokensRepository_TokenHash_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefreshTokensRepository_TokenHash_Call[T]) RunAndReturn(run func(context.Context, unit_of_work.UnitOfWork[T], uuid.UUID, DeviceId) ([]byte, error)) *MockRefreshTokensRepository_TokenHash_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UpdateTokenHash provides a mock function with given fields: ctx, uow, userId, oldDeviceId, newDeviceId, tokenHash
func (_m *MockRefreshTokensRepository[T]) UpdateTokenHash(ctx context.Context, uow unit_of_work.UnitOfWork[T], userId uuid.UUID, oldDeviceId DeviceId, newDeviceId DeviceId, tokenHash []byte) error {
	ret := _m.Called(ctx, uow, userId, oldDeviceId, newDeviceId, tokenHash)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTokenHash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, unit_of_work.UnitOfWork[T], uuid.UUID, DeviceId, DeviceId, []byte) error); ok {
		r0 = rf(ctx, uow, userId, oldDeviceId, newDeviceId, tokenHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRefreshTokensRepository_UpdateTokenHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTokenHash'
type MockRefreshTokensRepository_UpdateTokenHash_Call[T any] struct {
	*mock.Call
}

// UpdateTokenHash is a helper method to define mock.On call
//   - ctx context.Context
//   - uow unit_of_work.UnitOfWork[T]
//   - userId uuid.UUID
//   - oldDeviceId DeviceId
//   - newDeviceId DeviceId
//   - tokenHash []byte
func (_e *MockRefreshTokensRepository_Expecter[T]) UpdateTokenHash(ctx interface{}, uow interface{}, userId interface{}, oldDeviceId interface{}, newDeviceId interface{}, tokenHash interface{}) *MockRefreshTokensRepository_UpdateTokenHash_Call[T] {
	return &MockRefreshTokensRepository_UpdateTokenHash_Call[T]{Call: _e.mock.On("UpdateTokenHash", ctx, uow, userId, oldDeviceId, newDeviceId, tokenHash)}
}

func (_c *MockRefreshTokensRepository_UpdateTokenHash_Call[T]) Run(run func(ctx context.Context, uow unit_of_work.UnitOfWork[T], userId uuid.UUID, oldDeviceId DeviceId, newDeviceId DeviceId, tokenHash []byte)) *MockRefreshTokensRepository_UpdateTokenHash_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(unit_of_work.UnitOfWork[T]), args[2].(uuid.UUID), args[3].(DeviceId), args[4].(DeviceId), args[5].([]byte))
	})
	return _c
}

func (_c *MockRefreshTokensRepository_UpdateTokenHash_Call[T]) Return(_a0 error) *MockRefreshTokensRepository_UpdateTokenHash_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRefreshTokensRepository_UpdateTokenHash_Call[T]) RunAndReturn(run func(context.Context, unit_of_work.UnitOfWork[T], uuid.UUID, DeviceId, DeviceId, []byte) error) *MockRefreshTokensRepository_UpdateTokenHash_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UpsertTokenHash provides a mock function with given fields: ctx, userId, deviceId, tokenHash
func (_m *MockRefreshTokensRepository[T]) UpsertTokenHash(ctx context.Context, userId uuid.UUID, deviceId DeviceId, tokenHash []byte) error {
	ret := _m.Called(ctx, userId, deviceId, tokenHash)

	if len(ret) == 0 {
		panic("no return value specified for UpsertTokenHash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, DeviceId, []byte) error); ok {
		r0 = rf(ctx, userId, deviceId, tokenHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRefreshTokensRepository_UpsertTokenHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertTokenHash'
type MockRefreshTokensRepository_UpsertTokenHash_Call[T any] struct {
	*mock.Call
}

// UpsertTokenHash is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - deviceId DeviceId
//   - tokenHash []byte
func (_e *MockRefreshTokensRepository_Expecter[T]) UpsertTokenHash(ctx interface{}, userId interface{}, deviceId interface{}, tokenHash interface{}) *MockRefreshTokensRepository_UpsertTokenHash_Call[T] {
	return &MockRefreshTokensRepository_UpsertTokenHash_Call[T]{Call: _e.mock.On("UpsertTokenHash", ctx, userId, deviceId, tokenHash)}
}

func (_c *MockRefreshTokensRepository_UpsertTokenHash_Call[T]) Run(run func(ctx context.Context, userId uuid.UUID, deviceId DeviceId, tokenHash []byte)) *MockRefreshTokensRepository_UpsertTokenHash_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(DeviceId), args[3].([]byte))
	})
	return _c
}

func (_c *MockRefreshTokensRepository_UpsertTokenHash_Call[T]) Return(_a0 error) *MockRefreshTokensRepository_UpsertTokenHash_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRefreshTokensRepository_UpsertTokenHash_Call[T]) RunAndReturn(run func(context.Context, uuid.UUID, DeviceId, []byte) error) *MockRefreshTokensRepository_UpsertTokenHash_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockRefreshTokensRepository creates a new instance of MockRefreshTokensRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRefreshTokensRepository[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRefreshTokensRepository[T] {
	mock := &MockRefreshTokensRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
