// Code generated by mockery v2.46.3. DO NOT EDIT.

package unit_of_work

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFactory is an autogenerated mock type for the Factory type
type MockFactory[T any] struct {
	mock.Mock
}

type MockFactory_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockFactory[T]) EXPECT() *MockFactory_Expecter[T] {
	return &MockFactory_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx
func (_m *MockFactory[T]) Execute(ctx context.Context) (UnitOfWork[T], error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 UnitOfWork[T]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (UnitOfWork[T], error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) UnitOfWork[T]); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UnitOfWork[T])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFactory_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockFactory_Execute_Call[T any] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFactory_Expecter[T]) Execute(ctx interface{}) *MockFactory_Execute_Call[T] {
	return &MockFactory_Execute_Call[T]{Call: _e.mock.On("Execute", ctx)}
}

func (_c *MockFactory_Execute_Call[T]) Run(run func(ctx context.Context)) *MockFactory_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFactory_Execute_Call[T]) Return(_a0 UnitOfWork[T], _a1 error) *MockFactory_Execute_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFactory_Execute_Call[T]) RunAndReturn(run func(context.Context) (UnitOfWork[T], error)) *MockFactory_Execute_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockFactory creates a new instance of MockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFactory[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFactory[T] {
	mock := &MockFactory[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
